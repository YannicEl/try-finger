rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // block all read and write access per default
      allow read, write: if false;

      match /users/{userId} {
        // only allow users to get their own user document
        allow get: if request.auth.uid == userId;

        match /joinedChats/{chatId} {
          // only allow users to read their own joinedChats
          allow read: if request.auth.uid == userId;
        }
      }

      match /chats/{chatId} {
        // allow everybody to create new chats
        allow create: if true;

        // only allow users to get chats where they are a member
        allow get: if request.auth.uid in resource.data.members

        match /messages/{messageId} { 
          // only allow users to read messages of a chat if they are a member
          allow list: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members

          // only allow users to delete messages that they wrote
          allow delete: if resource.data.sender == request.auth.uid;

          // only allow users to update the "message" field on their own messages 
          allow update: if resource.data.sender == request.auth.uid && verifyFields(["message"]);
        }
      }
    }
  }


  // helper function that valdiates that only allowed field are updated
  function verifyFields(allowedFields) {
    // field "updatedAt" is always allowed
    let allAllowedFields = ["updatedAt"].concat(allowedFields);
    return request.resource.data.keys().hasOnly(allAllowedFields);
  }
}