rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // block all read and write access per default
      allow read, write: if false;

      match /users/{userId} {
        // only allow users to get + create their own user document
        allow get, create: if request.auth.uid == userId 
          && verifyCreateFields([], ["name"]);

        match /joinedChats/{chatId} {
          // only allow users to list their own joinedChats
          allow list: if request.auth.uid == userId 

          // only allow users to create their own joinedChats
          allow create: if request.auth.uid == userId && verifyCreateFields(["name"], ["lastMsg"]);
        }
      }

      match /chats/{chatId} {
        // allow everybody to create new chats
        allow create: if verifyCreateFields(["name", "members"], []);

        // only allow users to get chats where they are a member
        allow get: if request.auth.uid in resource.data.members

        match /messages/{messageId} {
          // only allow users to read messages of a chat if they are a member
          allow list: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members

          // only allow users to create messages if they are a member of the chat and if the "sender" field == uid from the logged in user
          allow create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members 
            && request.resource.data.sender == request.auth.uid 
            && verifyCreateFields(["sender", "message"], [])

          // only allow users to delete messages that they wrote
          allow delete: if resource.data.sender == request.auth.uid;

          // only allow users to update the "message" field on their own messages 
          allow update: if resource.data.sender == request.auth.uid 
            && verifyUpdateFields(["message"]);
        }
      }
    }
  }

  // verifies that only required or optional fields are written on create
  function verifyCreateFields(required, optional) {
    // fields "updatedAt" and "createdAt" are always allowed
    let allAllowedFields = ["updatedAt", "createdAt"].concat(required).concat(optional);
    return request.resource.data.keys().hasAll(required) 
      && request.resource.data.keys().hasOnly(allAllowedFields);
  }

  // verifies that only allowed fields are updated
  function verifyUpdateFields(allowed) {
    // field "updatedAt" is always allowed
    let changedFields = request.resource.data.diff(resource.data).affectedKeys().concat(["updatedAt"]);
    return changedFields.hasOnly(allowed);
  }
}